plugins {
    id 'application'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.node-gradle.node' version '7.1.0'
}

group 'pl.edu.agh.to2'
version '1.0-SNAPSHOT'


repositories {
    mavenCentral()
    maven { url 'https://mvnrepository.com/artifact/net.kemitix/sqlite-dialect'}
}

application {
    mainClassName = 'Application'
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


test {
    useJUnitPlatform()
    dependsOn = []
}

dependencies {
    implementation 'org.apache.commons:commons-collections4:4.5.0-M2'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.hibernate:hibernate-core:6.6.0.Final'
    implementation 'com.h2database:h2:2.2.224'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.5"

    implementation 'org.slf4j:slf4j-api:2.0.9' // Version of SLF4J
    implementation 'ch.qos.logback:logback-classic:1.4.12' // Version of Logback
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

node {
    version = '18.16.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
}

task buildFrontend(type: NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build']
    doFirst {
        workingDir = file("$projectDir/frontend")
    }

    doLast {
        copy {
            from "$projectDir/frontend/dist"
            into "$buildDir/resources/main/static"
        }
    }
}

tasks.named('processResources') {
    dependsOn buildFrontend
}

tasks.bootRun {
    dependsOn npmInstall
}